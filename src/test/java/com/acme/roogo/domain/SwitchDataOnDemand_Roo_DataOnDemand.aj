// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.acme.roogo.domain;

import com.acme.roogo.domain.Switch;
import com.acme.roogo.domain.SwitchDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect SwitchDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SwitchDataOnDemand: @Component;
    
    private Random SwitchDataOnDemand.rnd = new SecureRandom();
    
    private List<Switch> SwitchDataOnDemand.data;
    
    public Switch SwitchDataOnDemand.getNewTransientSwitch(int index) {
        Switch obj = new Switch();
        setSwitchName(obj, index);
        setSwitchValue(obj, index);
        return obj;
    }
    
    public void SwitchDataOnDemand.setSwitchName(Switch obj, int index) {
        String switchName = "switchName_" + index;
        obj.setSwitchName(switchName);
    }
    
    public void SwitchDataOnDemand.setSwitchValue(Switch obj, int index) {
        String switchValue = "switchValue_" + index;
        obj.setSwitchValue(switchValue);
    }
    
    public Switch SwitchDataOnDemand.getSpecificSwitch(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Switch obj = data.get(index);
        Long id = obj.getId();
        return Switch.findSwitch(id);
    }
    
    public Switch SwitchDataOnDemand.getRandomSwitch() {
        init();
        Switch obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Switch.findSwitch(id);
    }
    
    public boolean SwitchDataOnDemand.modifySwitch(Switch obj) {
        return false;
    }
    
    public void SwitchDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Switch.findSwitchEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Switch' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Switch>();
        for (int i = 0; i < 10; i++) {
            Switch obj = getNewTransientSwitch(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
